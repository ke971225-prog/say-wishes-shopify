<!-- Critical CSS Optimization for Enhanced Performance -->
<style>
  /* Critical Above-the-fold CSS - Inline for fastest rendering */
  
  /* Reset and base styles */
  *, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  
  html {
    font-size: 62.5%; /* 10px base for easier rem calculations */
    scroll-behavior: smooth;
  }
  
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    font-size: 1.6rem;
    line-height: 1.6;
    color: #333;
    background-color: #fff;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    font-display: swap;
  }
  
  /* Critical layout containers */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  .grid {
    display: grid;
    gap: 2rem;
  }
  
  .flex {
    display: flex;
    align-items: center;
  }
  
  /* Header critical styles */
  .header {
    position: sticky;
    top: 0;
    z-index: 100;
    background: #fff;
    border-bottom: 1px solid #e5e5e5;
    will-change: transform;
    contain: layout style paint;
  }
  
  .header__inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 2rem;
    min-height: 6rem;
  }
  
  .logo {
    font-size: 2.4rem;
    font-weight: 700;
    text-decoration: none;
    color: #333;
  }
  
  /* Navigation critical styles */
  .nav {
    display: flex;
    list-style: none;
    gap: 3rem;
  }
  
  .nav__link {
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: color 0.2s ease;
  }
  
  .nav__link:hover {
    color: #007bff;
  }
  
  /* Hero section critical styles */
  .hero {
    min-height: 50vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    will-change: transform;
  }
  
  .hero__title {
    font-size: clamp(3rem, 5vw, 6rem);
    font-weight: 700;
    margin-bottom: 2rem;
    line-height: 1.2;
  }
  
  .hero__subtitle {
    font-size: clamp(1.6rem, 2.5vw, 2.4rem);
    margin-bottom: 3rem;
    opacity: 0.9;
  }
  
  /* Button critical styles */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1.2rem 2.4rem;
    font-size: 1.6rem;
    font-weight: 600;
    text-decoration: none;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    will-change: transform;
  }
  
  .btn--primary {
    background: #007bff;
    color: white;
  }
  
  .btn--primary:hover {
    background: #0056b3;
    transform: translateY(-2px);
  }
  
  /* Product grid critical styles */
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 3rem;
    margin: 4rem 0;
  }
  
  .product-card {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    will-change: transform;
  }
  
  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
  
  .product-image {
    width: 100%;
    height: 250px;
    object-fit: cover;
    display: block;
  }
  
  .product-info {
    padding: 2rem;
  }
  
  .product-title {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #333;
  }
  
  .product-price {
    font-size: 2rem;
    font-weight: 700;
    color: #007bff;
  }
  
  /* Loading states */
  .loading {
    opacity: 0.7;
    pointer-events: none;
  }
  
  .skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
  
  /* Performance optimizations */
  .animate {
    will-change: transform;
  }
  
  .animate:not(:hover) {
    will-change: auto;
  }
  
  /* Mobile-first responsive design */
  @media (max-width: 768px) {
    .container {
      padding: 0 1rem;
    }
    
    .header__inner {
      padding: 1rem;
    }
    
    .nav {
      display: none; /* Hidden on mobile, shown via JS */
    }
    
    .hero {
      min-height: 40vh;
      padding: 2rem 1rem;
    }
    
    .product-grid {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin: 2rem 0;
    }
    
    .product-info {
      padding: 1.5rem;
    }
  }
  
  /* Tablet styles */
  @media (min-width: 769px) and (max-width: 1024px) {
    .product-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
  }
  
  /* Print styles */
  @media print {
    .header,
    .nav,
    .btn {
      display: none;
    }
    
    body {
      font-size: 12pt;
      line-height: 1.4;
    }
  }
  
  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
    
    html {
      scroll-behavior: auto;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .btn--primary {
      background: #000;
      color: #fff;
      border: 2px solid #fff;
    }
    
    .product-card {
      border: 2px solid #000;
    }
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    body {
      background-color: #1a1a1a;
      color: #e0e0e0;
    }
    
    .header {
      background: #2a2a2a;
      border-bottom-color: #444;
    }
    
    .logo,
    .nav__link {
      color: #e0e0e0;
    }
    
    .product-card {
      background: #2a2a2a;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    }
    
    .product-title {
      color: #e0e0e0;
    }
  }
</style>

<script>
  // Critical JavaScript for immediate functionality
  (function() {
    'use strict';
    
    // Font loading optimization
    if ('fonts' in document) {
      // Load critical fonts
      const criticalFonts = [
        'system-ui',
        '-apple-system',
        'BlinkMacSystemFont'
      ];
      
      // Preload web fonts if any
      const webFonts = document.querySelectorAll('link[rel="preload"][as="font"]');
      webFonts.forEach(font => {
        font.addEventListener('load', () => {
          document.documentElement.classList.add('fonts-loaded');
        });
      });
    }
    
    // Critical DOM ready optimizations
    function domReady() {
      // Add loaded class for CSS transitions
      document.documentElement.classList.add('dom-ready');
      
      // Initialize critical interactions
      initializeCriticalInteractions();
      
      // Setup performance monitoring
      setupCriticalPerformanceMonitoring();
    }
    
    function initializeCriticalInteractions() {
      // Mobile menu toggle (if exists)
      const menuToggle = document.querySelector('[data-menu-toggle]');
      const mobileNav = document.querySelector('[data-mobile-nav]');
      
      if (menuToggle && mobileNav) {
        menuToggle.addEventListener('click', (e) => {
          e.preventDefault();
          mobileNav.classList.toggle('active');
          menuToggle.setAttribute('aria-expanded', 
            mobileNav.classList.contains('active'));
        });
      }
      
      // Smooth scroll for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    }
    
    function setupCriticalPerformanceMonitoring() {
      // Monitor critical rendering metrics
      if ('PerformanceObserver' in window) {
        // Monitor LCP for above-the-fold content
        const lcpObserver = new PerformanceObserver((entryList) => {
          const entries = entryList.getEntries();
          const lastEntry = entries[entries.length - 1];
          
          if (lastEntry.startTime < 2500) {
            document.documentElement.classList.add('fast-lcp');
          } else if (lastEntry.startTime > 4000) {
            document.documentElement.classList.add('slow-lcp');
          }
        });
        
        try {
          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
        } catch (e) {
          console.log('LCP observer not supported');
        }
      }
      
      // Monitor critical resource loading
      window.addEventListener('load', () => {
        const loadTime = performance.now();
        if (loadTime < 1000) {
          document.documentElement.classList.add('fast-load');
        } else if (loadTime > 3000) {
          document.documentElement.classList.add('slow-load');
        }
      });
    }
    
    // Initialize immediately or on DOM ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', domReady);
    } else {
      domReady();
    }
  })();
</script>